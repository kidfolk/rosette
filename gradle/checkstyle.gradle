configurations {
    codequality
}

repositories {
    mavenCentral()
}

dependencies {
    codequality 'com.puppycrawl.tools:checkstyle:5.6'
}

task checkstyle(type: AndroidCheckstyleTask) {
    classpath = configurations.codequality
    ignoreFailures = true
}

check.dependsOn(checkstyle)

// https://github.com/BeneStem/WicketCheesr/blob/daa74f0b7ca3ee0f47e1ab902a3c756553efa156/build.gradle
// https://github.com/gradleware/oreilly-gradle-book-examples/blob/master/ant-customtaskuse/build.gradle
// http://gradle.1045684.n5.nabble.com/Trying-to-use-Checkstyle-getting-TreeWalker-error-td1435438.html

import org.gradle.api.internal.project.IsolatedAntBuilder

class AndroidCheckstyleTask extends DefaultTask {

    @InputFile @Optional File configFile = new File("$project.rootDir/config/checkstyle/checkstyle.xml")
    @InputFile @Optional File xslFile = new File("$project.rootDir/config/checkstyle/checkstyle-noframes-sorted.xsl")
    @OutputFile @Optional File outputFile = new File("$project.buildDir/reports/checkstyle/checkstyle.xml")
    @InputFiles FileCollection classpath
    Boolean ignoreFailures = false
    Boolean console = false

    Project gproj = project

    @TaskAction
    def runCheckstyle() {
        outputFile.parentFile.mkdirs()
        def antBuilder = services.get(IsolatedAntBuilder)
        antBuilder.withClasspath(classpath).execute {
            ant.taskdef(name: 'checkstyle', classname: 'com.puppycrawl.tools.checkstyle.CheckStyleTask')
            // see also, maxWarnings and failureProperty arguments
            ant.checkstyle(config: configFile, failOnViolation: !ignoreFailures) {
                fileset(dir: gproj.projectDir.getPath()) {
                    gproj.android.sourceSets.each { sourceSet ->
                        sourceSet.java.each { file ->
                            include(name: gproj.relativePath(file))
                        }
                    }
                }

                if (console) {
                    formatter(type: 'plain', useFile: false)
                }
                formatter(type: 'xml', toFile: outputFile)
            }

            if (outputFile.exists()) {
                ant.xslt(in:   outputFile,
                        style: xslFile,
                        out:   outputFile.parent + "/checkstyle.html"
                )
            }

        }
    }
}
